{
        "schema": "conf/plugin/polardb_pg/schema.json",
        "type": "perf",
        "business": "perf",
        "context": {
                "datatype": "polardb-o",
                "base_path": "/disk1/polardb_ppas/",
                "username": "aurora",
                "password": "",
                "database": "polardb_admin",
                "application_name": "ue_dbmetrics_collector",
                "cycle": 1,
                "dbtype": "polardb_pg",
                "environment": "public_cloud",
                "is_on_ecs": false,
                "enable_pfs": true,
                "local_disk_collect_interval": 10,
                "queries": [
                        {
                                "name": "connection",
                                "enable": 1,
                                "cycle": 1,
                                "query": "SELECT SUM(CASE WHEN state IN ('active') THEN 1 ELSE 0 END) AS active_transactions, SUM(CASE WHEN wait_event != NULL THEN 1 ELSE 0 END) AS waiting_connections, SUM(CASE WHEN wait_event != NULL THEN 1 ELSE 0 END) AS waiting_transactions, SUM(CASE WHEN state IN ('idle in transaction') THEN 1 ELSE 0 END) AS idle_transactions_connections, SUM(CASE WHEN state IN ('idle in transaction (aborted)') THEN 1 ELSE 0 END) AS idle_transactions_aborted_connections, SUM(CASE WHEN state IN ('active') AND (now() - query_start > '10s'::interval) THEN 1 ELSE 0 END) AS long_executing_sqls, SUM(CASE WHEN state IN ('active') AND (now() - query_start > '1s'::interval) THEN 1 ELSE 0 END) AS one_second_executing_sqls, SUM(CASE WHEN state IN ('active') AND (now() - query_start > '3s'::interval) THEN 1 ELSE 0 END) AS three_seconds_executing_sqls, SUM(CASE WHEN state IN ('active') AND (now() - query_start > '5s'::interval) THEN 1 ELSE 0 END) AS five_seconds_executing_sqls, SUM(CASE WHEN state IN ('idle in transaction') AND (now() - query_start > '7200s'::interval) THEN 1 ELSE 0 END) AS long_idle_transactions, SUM(CASE WHEN state IN ('idle in transaction', 'idle in transaction (aborted)') AND (now() - state_change > '1s'::interval) THEN 1 ELSE 0 END) AS one_second_idle_transactions, SUM(CASE WHEN state IN ('idle in transaction', 'idle in transaction (aborted)') AND (now() - state_change > '3s'::interval) THEN 1 ELSE 0 END) AS three_seconds_idle_transactions, SUM(CASE WHEN state IN ('idle in transaction', 'idle in transaction (aborted)') AND (now() - state_change > '5s'::interval) THEN 1 ELSE 0 END) AS five_seconds_idle_transactions, SUM(CASE WHEN (now() - xact_start > '7200s'::interval) THEN 1 ELSE 0 END) AS long_transactions, SUM(CASE WHEN (now() - xact_start > '1s'::interval) THEN 1 ELSE 0 END) AS one_second_transactions, SUM(CASE WHEN (now() - xact_start > '3s'::interval) THEN 1 ELSE 0 END) AS three_seconds_transactions, SUM(CASE WHEN (now() - xact_start > '5s'::interval) THEN 1 ELSE 0 END) AS five_seconds_long_transactions FROM pg_stat_activity WHERE backend_type = 'client backend' AND application_name NOT IN ('logagent', 'ClusterManager')"
                        },
                        {
                                "name": "connection_multibackend",
                                "enable": 1,
                                "cycle": 1,
                                "send_to_multibackend": 1,
                                "query": "SELECT COUNT(*) AS connections, SUM(CASE WHEN state IN ('active') THEN 1 ELSE 0 END) AS active_connections, SUM(CASE WHEN state IN ('idle') THEN 1 ELSE 0 END) AS idle_connections, SUM(CASE WHEN state IN ('idle in transaction', 'idle in transaction (aborted)') THEN 1 ELSE 0 END) AS idle_transactions FROM pg_stat_activity WHERE backend_type = 'client backend' AND application_name NOT IN ('logagent', 'ClusterManager')"
                        },
                        {
                                "name": "two_phase",
                                "enable": 1,
                                "cycle": 1,
                                "query": "SELECT SUM(CASE WHEN (now() - prepared > '1s'::interval) THEN 1 ELSE 0 END) AS one_second_two_pc_transactions, SUM(CASE WHEN (now() - prepared > '3s'::interval) THEN 1 ELSE 0 END) AS three_seconds_two_pc_transactions, SUM(CASE WHEN (now() - prepared > '5s'::interval) THEN 1 ELSE 0 END) AS five_seconds_two_pc_transactions FROM pg_prepared_xacts"
                        },
                        {
                                "name": "two_phase_multibackend",
                                "enable": 1,
                                "cycle": 1,
                                "send_to_multibackend": 1,
                                "query": "SELECT COUNT(*) AS two_pc_transactions FROM pg_prepared_xacts"
                        },
                        {
                                "name": "database",
                                "enable": 1,
                                "cycle": 1,
                                "send_to_multibackend": 1,
                                "query": "SELECT SUM(numbackends) AS numbackends ,SUM(tup_returned) AS tup_returned_delta, SUM(tup_fetched) AS tup_fetched_delta, SUM(tup_inserted) AS tup_inserted_delta, SUM(tup_updated) AS tup_updated_delta, SUM(tup_deleted) AS tup_deleted_delta, SUM(xact_commit) AS commits_delta, SUM(xact_rollback) AS rollbacks_delta, SUM(deadlocks) AS deadlocks_delta, SUM(temp_files) AS temp_files_delta, SUM(temp_bytes) AS temp_bytes_delta, SUM(blks_read) AS blks_read_delta, SUM(blks_hit) AS blks_hit_delta ,SUM(conflicts) AS conflicts_delta FROM pg_stat_database"
                        },
                        {
                                "name": "bgwriter",
                                "enable": 1,
                                "cycle": 1,
                                "send_to_multibackend": 1,
                                "query": "SELECT checkpoints_timed AS checkpoints_timed_delta ,checkpoints_req AS checkpoints_req_delta ,CAST(checkpoint_sync_time AS BIGINT) AS checkpoint_sync_time_delta ,CAST(checkpoint_write_time AS BIGINT) AS checkpoint_write_time_delta ,buffers_checkpoint AS buffers_checkpoint_delta ,buffers_clean AS buffers_clean_delta ,maxwritten_clean AS maxwritten_clean_delta ,buffers_backend AS buffers_backend_delta ,buffers_backend_fsync AS buffers_backend_fsync_delta ,buffers_alloc AS buffers_alloc_delta FROM pg_stat_bgwriter"
                        },
                        {
                                "name": "swell_time",
                                "enable": 1,
                                "cycle": 10,
                                "send_to_multibackend": 1,
                                "query": "WITH a AS (SELECT MIN(xact_start) m FROM pg_stat_activity WHERE backend_type='client backend' AND (backend_xid IS NOT NULL OR backend_xmin IS NOT NULL)), b AS (SELECT MIN(prepared) m FROM pg_prepared_xacts) SELECT EXTRACT(EPOCH FROM NOW()-LEAST(a.m,b.m))::BIGINT AS swell_time FROM a,b"
                        },
                        {
                                "name": "db_age",
                                "enable": 1,
                                "cycle": 10,
                                "send_to_multibackend": 1,
                                "query": "SELECT MAX(AGE(datfrozenxid)) AS db_age FROM pg_database ORDER BY db_age DESC LIMIT 1"
                        },
                        {
                                "name": "stream_replciation",
                                "enable": 1,
                                "cycle": 10,
                                "role": 1,
                                "send_to_multibackend": 1,
                                "query": "SELECT MAX(CAST(pg_wal_lsn_diff(A .c1, replay_lsn) /(1024 * 1024) AS BIGINT)) AS replay_latency_in_mb, MAX(CAST(pg_wal_lsn_diff(A .c1, sent_lsn) /(1024 * 1024) AS BIGINT)) AS send_latency_in_mb FROM pg_stat_replication, pg_current_wal_lsn() AS A(c1) WHERE usename='replicator' ORDER BY replay_latency_in_mb, send_latency_in_mb DESC LIMIT 1"
                        },
                        {
                                "name": "logical_replication",
                                "enable": 1,
                                "cycle": 1,
                                "role": 1,
                                "query": "SELECT CAST(pg_wal_lsn_diff(l.current_location, s.restart_lsn ) /(1024 * 1024) AS BIGINT) AS logical_rep_latency_in_mb FROM pg_replication_slots s, pg_current_wal_lsn() l(current_location) WHERE slot_type='logical' ORDER BY logical_rep_latency_in_mb DESC LIMIT 1"
                        },
                        {
                                "name": "polardb_replication",
                                "enable": 1,
                                "cycle": 10,
                                "role": 1,
                                "send_to_multibackend": 1,
                                "query": "SELECT CASE WHEN CAST(pg_wal_lsn_diff(pg_current_wal_lsn(), polar_oldest_apply_lsn()) /(1024 * 1024) AS BIGINT) >= 0 THEN CAST(pg_wal_lsn_diff(pg_current_wal_lsn(), polar_oldest_apply_lsn()) /(1024 * 1024) AS BIGINT) ELSE 0::BIGINT END AS wp_ap_latency_mb, CASE WHEN CAST(pg_wal_lsn_diff(polar_oldest_apply_lsn(), polar_consistent_lsn()) / (1024 * 1024) AS BIGINT) >= 0 THEN CAST(pg_wal_lsn_diff(polar_oldest_apply_lsn(), polar_consistent_lsn()) / (1024 * 1024) AS BIGINT) ELSE 0::BIGINT END AS ap_cp_latency_mb, CASE WHEN CAST(pg_wal_lsn_diff(pg_current_wal_insert_lsn(), polar_consistent_lsn()) / (1024 * 1024) AS BIGINT) >= 0 THEN CAST(pg_wal_lsn_diff(pg_current_wal_insert_lsn(), polar_consistent_lsn()) / (1024 * 1024) AS BIGINT) ELSE 0::BIGINT END AS wp_cp_latency_mb"
                        },
                        {
                                "name": "dirtypages",
                                "enable": 1,
                                "cycle": 10,
                                "role": 1,
                                "send_to_multibackend": 1,
                                "query": "SELECT size AS polar_dirtypage_size FROM polar_flushlist()"
                        },
                        {
                                "name": "copybuffer",
                                "enable": 1,
                                "cycle": 10,
                                "role": 1,
                                "send_to_multibackend": 1,
                                "query": "SELECT (copy - release) AS polar_copybuffer_used_size, \"full\"::int AS polar_copybuffer_isfull FROM polar_cbuf()"
                        },
                        {
                                "enable": 1,
                                "name": "wait_events",
                                "cycle": 1,
                                "send_to_multibackend": 1,
                                "min_version": 100000,
                                "query": "SELECT SUM(CASE WHEN wait_event_type is NULL THEN 1 ELSE 0 END) AS cpu_waits, SUM(CASE WHEN wait_event_type = 'LWLock' THEN 1 ELSE 0 END) AS lwlock_waits, SUM(CASE WHEN wait_event_type = 'Lock' THEN 1 ELSE 0 END) AS lock_waits, SUM(CASE WHEN wait_event_type = 'BufferPin' THEN 1 ELSE 0 END) AS bufferpin_waits, SUM(CASE WHEN wait_event_type = 'Activity' THEN 1 ELSE 0 END) AS activity_waits, SUM(CASE WHEN wait_event_type = 'Client' THEN 1 ELSE 0 END) AS client_waits, SUM(CASE WHEN wait_event_type = 'Extension' THEN 1 ELSE 0 END) AS extension_waits, SUM(CASE WHEN wait_event_type = 'IPC' THEN 1 ELSE 0 END) AS ipc_waits, SUM(CASE WHEN wait_event_type = 'Timeout' THEN 1 ELSE 0 END) AS timeout_waits, SUM(CASE WHEN wait_event_type = 'IO' THEN 1 ELSE 0 END) AS io_waits FROM pg_stat_activity WHERE usename NOT IN ('aurora', 'replicator') AND backend_type='client backend' AND state='active'"
                        },
                        {
                                "name": "inactive_slots",
                                "enable": 1,
                                "cycle": 10,
                                "send_to_multibackend": 1,
                                "min_version": 100000,
                                "query": "select count(*) AS inactive_slots from pg_replication_slots where restart_lsn is not null and active = 'f'"
                        },
                        {
                                "name": "checkpoint_latency",
                                "enable": 1,
                                "cycle": 1,
                                "role": 1,
                                "send_to_multibackend": 1,
                                "min_version": 100000,
                                "query": "select CASE WHEN CAST(pg_wal_lsn_diff(pg_current_wal_insert_lsn(), redo_lsn) AS BIGINT) >= 0 THEN CAST(pg_wal_lsn_diff(pg_current_wal_insert_lsn(), redo_lsn) / 1024 / 1024 AS BIGINT) ELSE 0::BIGINT END AS checkpoint_latency_mb from pg_control_checkpoint();"
                        },
                        {
                                "name": "long_running_sqls",
                                "enable": 1,
                                "cycle": 1,
                                "send_to_multibackend": 1,
                                "query": "SELECT (ROUND((CASE WHEN query_start IS NOT NULL THEN (EXTRACT(epoch FROM now()) - EXTRACT(epoch FROM query_start)) ELSE 0 END)::numeric,3) * 1000)::bigint AS longest_sql_running_time FROM pg_stat_activity WHERE backend_type='client backend' ORDER BY longest_sql_running_time DESC LIMIT 1"
                        },
                        {
                                "enable": 0,
                                "name": "qps",
                                "send_to_multibackend": 1,
                                "cycle": 1,
                                "role": 1,
                                "query": "SELECT SUM(calls) AS qps_delta FROM pg_stat_statements(false)"
                        }
                ],
                "enable_dbconfig": true,
                "dbconfig_schema": "polar_gawr_collection",
                "configmap": {
                        "enable_db_resource_collect": "1",
                        "enable_db_metric_collect": "1",
                        "enable_write_localdb_backend": "1",
                        "enable_ro_write_localdb_backend": "1",
                        "enable_write_remotedb_backend": "1",
                        "enable_write_sqlite_backend": "1",
                        "enable_polardb_pg_collect_whitelist": "1"
                },
                "extensions": [
                        "polar_monitor",
                        "pg_stat_statements"
                ],
                "enable_outdict_log": false,
                "use_full_outdict": true,
                "config_db_init_sqls": [
                        {
                                "enable": 1,
                                "query": "CREATE OR REPLACE FUNCTION polar_gawr_collection.list_collections() RETURNS TABLE ( name TEXT, enable BOOLEAN, cycle INT8, role TEXT, datamodel TEXT, modifiable_byconf BOOLEAN, query TEXT, comment TEXT) AS $$ SELECT name, enable::BOOLEAN, cycle, CASE properties::jsonb->>'role' WHEN '0' THEN 'All' WHEN '1' THEN 'RW' WHEN '2' THEN 'RO' ELSE 'unknown' END, datamodel, modifiable_byconf, query, comment FROM polar_gawr_collection.meta_collect_sql_config; $$ LANGUAGE sql;"
                        },
                        {
                                "enable": 1,
                                "query": " CREATE OR REPLACE FUNCTION polar_gawr_collection.get_collection(IN _name TEXT) RETURNS TABLE ( name TEXT, enable BOOLEAN, cycle INT8, role TEXT, datamodel TEXT, modifiable_byconf BOOLEAN, query TEXT, comment TEXT) AS $$ SELECT name, enable::BOOLEAN, cycle, CASE properties::jsonb->>'role' WHEN '0' THEN 'All' WHEN '1' THEN 'RW' WHEN '2' THEN 'RO' ELSE 'unknown' END, datamodel, modifiable_byconf, query, comment FROM polar_gawr_collection.meta_collect_sql_config WHERE name=_name; $$ LANGUAGE sql;"
                        },
                        {
                                "enable": 1,
                                "query": " CREATE OR REPLACE FUNCTION polar_gawr_collection.add_collection( IN _name TEXT, IN _query TEXT, IN _cycle INT8 DEFAULT 10, IN _datamodel TEXT DEFAULT '', IN _comment TEXT DEFAULT '') RETURNS BIGINT AS $$ DECLARE _ret BIGINT; _enable_snapshot INTEGER; _properties JSON; BEGIN _ret = 0; _enable_snapshot = 1; IF _datamodel = '' THEN _datamodel = _name; END IF; IF _cycle < 60 THEN _enable_snapshot = 0; END IF; _properties = json_build_object('use_snapshot', _enable_snapshot, 'role', 0); WITH i AS ( INSERT INTO polar_gawr_collection.meta_collect_sql_config (name, query, datamodel, cycle, enable, modifiable_byconf, properties, comment) VALUES (_name, _query, _datamodel, _cycle, 1, false, _properties::TEXT, _comment) RETURNING *) SELECT COUNT(*) INTO _ret FROM i; IF _ret > 0 THEN UPDATE polar_gawr_collection.meta_config_version SET version=version+1; END IF; RETURN _ret; END $$ LANGUAGE plpgsql;"
                        },
                        {
                                "enable": 1,
                                "query": " CREATE OR REPLACE FUNCTION polar_gawr_collection.set_collection_query( IN _name TEXT, IN _query TEXT) RETURNS BIGINT AS $$ DECLARE _ret BIGINT; BEGIN _ret = 0; WITH u AS ( UPDATE polar_gawr_collection.meta_collect_sql_config SET query=_query, modifiable_byconf=false WHERE name=_name RETURNING *) SELECT COUNT(*) INTO _ret FROM u; IF _ret > 0 THEN UPDATE polar_gawr_collection.meta_config_version SET version=version+1; END IF; RETURN _ret; END $$ LANGUAGE plpgsql;"
                        },
                        {
                                "enable": 1,
                                "query": " CREATE OR REPLACE FUNCTION polar_gawr_collection.set_collection_datamodel( IN _name TEXT, IN _datamodel TEXT) RETURNS BIGINT AS $$ DECLARE _ret BIGINT; BEGIN _ret = 0; WITH u AS ( UPDATE polar_gawr_collection.meta_collect_sql_config SET datamodel=_datamodel, modifiable_byconf=false WHERE name=_name RETURNING *) SELECT COUNT(*) INTO _ret FROM u; IF _ret > 0 THEN UPDATE polar_gawr_collection.meta_config_version SET version=version+1; END IF; RETURN _ret; END $$ LANGUAGE plpgsql;"
                        },
                        {
                                "enable": 1,
                                "query": " CREATE OR REPLACE FUNCTION polar_gawr_collection.set_collection_cycle( IN _name TEXT, IN _cycle INT8) RETURNS BIGINT AS $$ DECLARE _ret BIGINT; BEGIN _ret = 0; WITH u AS ( UPDATE polar_gawr_collection.meta_collect_sql_config SET cycle=_cycle, modifiable_byconf=false WHERE name=_name RETURNING *) SELECT COUNT(*) INTO _ret FROM u; IF _ret > 0 THEN UPDATE polar_gawr_collection.meta_config_version SET version=version+1; END IF; RETURN _ret; END $$ LANGUAGE plpgsql;"
                        },
                        {
                                "enable": 1,
                                "query": " CREATE OR REPLACE FUNCTION polar_gawr_collection.set_collection_role( IN _name TEXT, IN _role TEXT) RETURNS BIGINT AS $$ DECLARE _ret BIGINT; _property_json JSONB; _role_json JSONB; _roleid INTEGER; BEGIN _ret = 0; IF _role != 'All' AND _role != 'RW' AND _role != 'RO' THEN RAISE EXCEPTION 'role must be one in (All, RW, RO)'; END IF; _roleid = 0; IF _role = 'All' THEN _roleid=0; ELSIF _role = 'RW' THEN _roleid=1; ELSIF _role = 'RO' THEN _roleid=2; ELSE _roleid=0; END IF; SELECT JSONB_SET(properties::JSONB, '{role}', TO_JSONB(_roleid)) INTO _property_json FROM polar_gawr_collection.meta_collect_sql_config WHERE name=_name; WITH u AS ( UPDATE polar_gawr_collection.meta_collect_sql_config SET properties=_property_json::TEXT, modifiable_byconf=false WHERE name=_name RETURNING *) SELECT COUNT(*) INTO _ret FROM u; IF _ret > 0 THEN UPDATE polar_gawr_collection.meta_config_version SET version=version+1; END IF; RETURN _ret; END $$ LANGUAGE plpgsql;"
                        },
                        {
                                "enable": 1,
                                "query": " CREATE OR REPLACE FUNCTION polar_gawr_collection.enable_collection( IN _name TEXT) RETURNS BIGINT AS $$ DECLARE _ret BIGINT; BEGIN _ret = 0; WITH u AS ( UPDATE polar_gawr_collection.meta_collect_sql_config SET enable=1, modifiable_byconf=false WHERE name=_name RETURNING *) SELECT COUNT(*) INTO _ret FROM u; IF _ret > 0 THEN UPDATE polar_gawr_collection.meta_config_version SET version=version+1; END IF; RETURN _ret; END $$ LANGUAGE plpgsql;"
                        },
                        {
                                "enable": 1,
                                "query": " CREATE OR REPLACE FUNCTION polar_gawr_collection.disable_collection( IN _name TEXT) RETURNS BIGINT AS $$ DECLARE _ret BIGINT; BEGIN _ret = 0; WITH u AS ( UPDATE polar_gawr_collection.meta_collect_sql_config SET enable=0, modifiable_byconf=false WHERE name=_name RETURNING *) SELECT COUNT(*) INTO _ret FROM u; IF _ret > 0 THEN UPDATE polar_gawr_collection.meta_config_version SET version=version+1; END IF; RETURN _ret; END $$ LANGUAGE plpgsql;"
                        },
                        {
                                "enable": 1,
                                "query": " CREATE OR REPLACE FUNCTION polar_gawr_collection.rollback_collection_to_default( IN _name TEXT) RETURNS BIGINT AS $$ DECLARE _ret BIGINT; BEGIN _ret = 0; WITH u AS ( UPDATE polar_gawr_collection.meta_collect_sql_config SET modifiable_byconf=true WHERE name=_name RETURNING *) SELECT COUNT(*) INTO _ret FROM u; IF _ret > 0 THEN UPDATE polar_gawr_collection.meta_config_version SET version=version+1; END IF; RETURN _ret; END $$ LANGUAGE plpgsql;"
                        },
                        {
                                "enable": 1,
                                "query": " CREATE OR REPLACE FUNCTION polar_gawr_collection.snapshot() RETURNS INTEGER AS $$ DECLARE _enable BOOLEAN; _snapshotno INTEGER; BEGIN SELECT NOW() - MAX(time) > '30s'::INTERVAL INTO _enable FROM polar_gawr_collection.meta_snapshots; IF NOT _enable THEN RAISE EXCEPTION 'We recommend that the time between two snapshots be greater than 30s'; END IF; INSERT INTO polar_gawr_collection.meta_snapshots (time) VALUES (NOW()) RETURNING snapshotno INTO _snapshotno; RETURN _snapshotno; END $$ LANGUAGE plpgsql"
                        },
                        {
                                "enable": 1,
                                "query": "CREATE OR REPLACE FUNCTION polar_gawr_collection.create_snapshot() RETURNS INTEGER AS $$ DECLARE _ret INTEGER; BEGIN SELECT polar_gawr_collection.snapshot() INTO _ret; RETURN _ret; END $$ LANGUAGE plpgsql"
                        },
                        {
                                "enable": 1,
                                "query": " CREATE OR REPLACE FUNCTION polar_gawr_collection.snapshot_show() RETURNS TABLE( snapshot integer, snapshot_time timestamp) AS $$ SELECT snapshotno, time FROM polar_gawr_collection.meta_snapshots ORDER BY snapshotno $$ LANGUAGE sql;"
                        },
                        {
                                "enable": 1,
                                "query": " CREATE OR REPLACE FUNCTION polar_gawr_collection.list_snapshot() RETURNS TABLE( snapshot integer, snapshot_time timestamp) AS $$ SELECT snapshotno, time FROM polar_gawr_collection.meta_snapshots ORDER BY snapshotno $$ LANGUAGE sql;"
                        },
                        {
                                "enable": 1,
                                "query": " DO $do$ BEGIN IF NOT EXISTS ( SELECT FROM pg_catalog.pg_roles WHERE  rolname = 'polar_gawr_user') THEN CREATE ROLE polar_gawr_user; END IF; END $do$;"
                        },
                        {
                                "enable": 1,
                                "query": " DO $do$ BEGIN IF NOT EXISTS ( SELECT FROM pg_catalog.pg_roles WHERE  rolname = 'polar_gawr_admin') THEN CREATE ROLE polar_gawr_admin; END IF; END $do$;"
                        },
                        {
                                "enable": 1,
                                "query": " CREATE SCHEMA IF NOT EXISTS polar_gawr_collection;"
                        },
                        {
                                "enable": 1,
                                "query": " CREATE SCHEMA IF NOT EXISTS polar_gawr_report;"
                        },
                        {
                                "enable": 1,
                                "query": "GRANT USAGE ON SCHEMA polar_gawr_collection, polar_gawr_report TO polar_gawr_user, polar_gawr_admin;"
                        },
                        {
                                "enable": 1,
                                "query": "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA polar_gawr_collection, polar_gawr_report TO polar_gawr_admin;"
                        },
                        {
                                "enable": 1,
                                "query": "GRANT SELECT ON ALL TABLES IN SCHEMA polar_gawr_collection, polar_gawr_report TO polar_gawr_user;"
                        },
                        {
                                "enable": 1,
                                "query": "GRANT INSERT ON polar_gawr_collection.meta_snapshots TO polar_gawr_user;"
                        },
                        {
                                "enable": 1,
                                "query": "GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA polar_gawr_collection, polar_gawr_report TO polar_gawr_user, polar_gawr_admin;"
                        },
                        {
                                "enable": 1,
                                "query": "GRANT USAGE ON ALL SEQUENCES IN SCHEMA polar_gawr_collection, polar_gawr_report TO polar_gawr_admin;"
                        },
                        {
                                "enable": 1,
                                "query": "ALTER DEFAULT PRIVILEGES FOR ROLE postgres, aurora IN SCHEMA polar_gawr_collection, polar_gawr_report GRANT SELECT ON TABLES TO polar_gawr_user;"
                        },
                        {
                                "enable": 1,
                                "query": "ALTER DEFAULT PRIVILEGES FOR ROLE postgres, aurora IN SCHEMA polar_gawr_collection, polar_gawr_report GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO polar_gawr_admin;"
                        },
                        {
                                "enable": 1,
                                "query": "ALTER DEFAULT PRIVILEGES FOR ROLE postgres, aurora IN SCHEMA polar_gawr_collection, polar_gawr_report GRANT EXECUTE ON FUNCTIONS TO polar_gawr_admin;"
                        },
                        {
                                "enable": 1,
                                "query": "ALTER DEFAULT PRIVILEGES FOR ROLE postgres, aurora IN SCHEMA polar_gawr_collection, polar_gawr_report GRANT USAGE ON SEQUENCES TO polar_gawr_admin, polar_gawr_user;"
                        },
                        {
                                "enable": 1,
                                "query": "ALTER SYSTEM SET track_io_timing=on;"
                        },
                        {
                                "enable": 0,
                                "query": "ALTER SYSTEM SET pg_stat_statements.track='all';"
                        },
                        {
                                "enable": 0,
                                "query": "SELECT pg_reload_conf();"
                        }
                ]
        }
}
