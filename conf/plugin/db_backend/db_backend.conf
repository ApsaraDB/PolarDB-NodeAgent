{  
"db_backends": {
"default_retention_time": 1296000,
"default_retention_interval": 86400,
"enable_remote_db_backend": true,
"hide_hostip_in_local_db_backend": true,
"backends_conf": [
{
    "name": "remote",
    "host": "localhost",
    "port": 1521,
    "username": "aurora",
    "database": "polardb_admin",
    "schema": "polar_awr_global"
},
{
    "name": "local",
    "host": "/tmp",
    "port": 5432,
    "username": "aurora",
    "database": "postgres",
    "schema": "polar_gawr_collection"
},
{
    "name": "sqlite",
    "host": "/tmp",
    "port": 5432,
    "username": "postgres",
    "database": "postgres",
    "schema": "polar_awr"
}
],
"datatype_backend": [
{
    "name": "polardb-o",
    "backends": ["local"]
},
{
    "name": "host",
    "backends": ["remote"]
},
{
    "name": "maxscale",
    "backends": ["local"]
},
{
    "name": "cluster_manager",
    "backends": ["local"]
}
]
},
"db_schemas": [
{
"name": "polardb-o",
"dbtemplate": {
"tables":
[
   {
      "name": "dbmetrics",
      "tags": [
      ],
      "values": [
      ],
      "aggregations": [
        {"granularity": 60, "retention": 604800},
        {"granularity": 3600, "retention": 1296000}
      ]
   },
   {
      "name": "polar_aas_history",
      "tags": [
         {
            "name": "queryid",
            "type": "INTEGER",
            "dimtable": {
               "dimkey": {
                 "name": "id",
                 "source": "autogen"
                 },
               "dimvalue": ["queryid"]
            }
         },
         {
            "name": "wait_event",
            "type": "INTEGER",
            "dimtable": {
               "dimkey": {
                 "name": "id",
                 "source": "autogen"
                 },
               "dimvalue": ["wait_event_type", "wait_event"]
            }
         }
      ],
      "values": [
         {
            "name": "wait_count",
            "type": "INTEGER",
            "aggtype": "RATE"
         }
      ],
      "aggregations": [
        {"granularity": 60, "retention": 604800},
        {"granularity": 3600, "retention": 1296000}
      ]
   },
   {
      "name": "polar_stat_io_info",
      "tags": [
         {
            "name": "fileloc",
            "type": "INTEGER",
            "dimtable": {
               "dimkey": {
                 "name": "id",
                 "source": "autogen"
                 },
               "dimvalue": ["fileloc"]
            }
         },
         {
            "name": "filetype",
            "type": "INTEGER",
            "dimtable": {
               "dimkey": {
                 "name": "id",
                 "source": "autogen"
                 },
               "dimvalue": ["filetype"]
            }
         }
      ],
      "values": [
      ],
      "aggregations": [
        {"granularity": 60, "retention": 604800},
        {"granularity": 3600, "retention": 1296000}
      ]
   },
   {
      "name": "polar_stat_io_latency",
      "tags": [
         {
            "name": "iotype",
            "type": "INTEGER",
            "dimtable": {
               "dimkey": {
                 "name": "id",
                 "source": "autogen"
                 },
               "dimvalue": ["iotype"]
            }
         }
      ],
      "values": [
      ],
      "aggregations": [
        {"granularity": 60, "retention": 604800},
        {"granularity": 3600, "retention": 1296000}
      ]
   },
   {
      "name": "polar_stat_mcxt",
      "tags": [
         {
            "name": "context_name",
            "type": "INTEGER",
            "dimtable": {
               "dimkey": {
                 "name": "id",
                 "source": "autogen"
                 },
               "dimvalue": ["context_name"]
            }
         }
      ],
      "values": [
      ],
      "aggregations": [
      ]
   },
   {
      "name": "polar_stat_process",
      "tags": [
         {
            "name": "backend_type",
            "type": "INTEGER",
            "dimtable": {
               "dimkey": {
                 "name": "id",
                 "source": "autogen"
                 },
               "dimvalue": ["backend_type"]
            }
         }
      ],
      "values": [
      ],
      "aggregations": [
        {"granularity": 60, "retention": 604800},
        {"granularity": 3600, "retention": 1296000}
      ]
   },
   {
      "name": "polar_stat_qps",
      "tags": [
         {
            "name": "sqltype",
            "type": "INTEGER",
            "dimtable": {
               "dimkey": {
                 "name": "id",
                 "source": "autogen"
                 },
               "dimvalue": ["sqltype", "cmdtype"]
            }
         }
      ],
      "values": [
      ],
      "aggregations": [
      ]
   },
   {
      "name": "polar_settings",
      "tags": [
      ],
      "values": [
      ],
      "aggregations": [
      ]
   },
   {
      "name": "polar_stat_top_sql",
      "tags": [
         {
            "name": "queryid",
            "type": "INTEGER",
            "dimtable": {
               "dimkey": {
                 "name": "id",
                 "source": "autogen"
                 },
               "dimvalue": ["queryid", "query"]
            }
         }
      ],
      "values": [
      ],
      "aggregations": [
      ]
   }
]}},
{
   "name": "maxscale",
   "dbtemplate": {
   "tables":
      [
         {
         "name": "maxscale_test",
         "tags": [
            {
               "name": "lock_name",
               "type": "string"
            }
         ],
         "values": [
            {
               "name": "sh_acquire_count",
               "type": "INTEGER"
            }
         ],
         "time": "time"
         },
         {
         "name": "maxscale_metrics",
         "tags": [
         ],
         "values": [
         ],
         "time": "time",
         "aggregations": [
         ]
         }
      ]
   }
},
{
"name": "host",
"dbtemplate": {
"tables":
[
   {
      "name": "cpu",
      "tags": [
      ],
      "values": [
      ],
         "aggregations": [
         ]
   },
   {
      "name": "memory",
      "tags": [
      ],
      "values": [
      ],
         "aggregations": [
         ]
   },
   {
      "name": "loadavg",
      "tags": [
      ],
      "values": [
      ],
         "aggregations": [
         ]
   },
   {
      "name": "socketstat",
      "tags": [
      ],
      "values": [
      ],
         "aggregations": [
         ]
   },
   {
      "name": "disk",
      "tags": [
         {
            "name": "disk",
            "type": "INTEGER",
            "dimtable": {
               "dimkey": {
                 "name": "id",
                 "source": "autogen"
                 },
               "dimvalue": ["disk"]
            }
         }
      ],
      "values": [
      ],
         "aggregations": [
         ]
   },
   {
      "name": "fs",
      "tags": [
         {
            "name": "fs",
            "type": "INTEGER",
            "dimtable": {
               "dimkey": {
                 "name": "id",
                 "source": "autogen"
                 },
               "dimvalue": ["fs"]
            }
         }
      ],
      "values": [
      ],
         "aggregations": [
         ]
   },
   {
      "name": "netdev",
      "tags": [
         {
            "name": "dev",
            "type": "INTEGER",
            "dimtable": {
               "dimkey": {
                 "name": "id",
                 "source": "autogen"
                 },
               "dimvalue": ["dev"]
            }
         }
      ],
      "values": [
      ],
         "aggregations": [
         ]
   }
]}},
{
"name": "cluster_manager",
"dbtemplate": {
"tables":
[
]}},
{
"name": "maxscale",
"dbtemplate": {
"tables":
[
]
}}
],

"init_sqls": [
    {"enable": 0, "query": "DO $$ DECLARE _table TEXT; _view TEXT; _column TEXT; BEGIN FOR _view IN SELECT table_name FROM information_schema.tables WHERE table_schema = CURRENT_SCHEMA() AND table_name LIKE 'view_%' LOOP RAISE NOTICE 'DROP VIEW %', _view; EXECUTE 'DROP VIEW ' || _view; END LOOP; FOR _table IN SELECT table_name FROM information_schema.tables WHERE table_schema = CURRENT_SCHEMA() AND (table_name LIKE 'agg_%' OR table_name LIKE 'fact_%') AND table_type='BASE TABLE' LOOP FOR _column IN SELECT column_name FROM information_schema.columns WHERE table_schema = CURRENT_SCHEMA() AND table_name = _table AND column_name LIKE 'value_%' LOOP RAISE NOTICE 'ALTER COLUMN % %', _table, _column; EXECUTE 'ALTER TABLE ' || _table || ' ALTER COLUMN ' || _column || ' TYPE REAL'; END LOOP; END LOOP; END $$;"},
    {"enable": 1, "query": " CREATE OR REPLACE FUNCTION set_datamodel_retention( IN _name TEXT, IN _retention INTERVAL) RETURNS BIGINT AS $$ DECLARE _ret BIGINT; BEGIN _ret = 0; WITH u AS ( UPDATE meta_data_model_config SET retention=EXTRACT(EPOCH FROM _retention)::BIGINT WHERE name='fact_' || _name RETURNING *) SELECT COUNT(*) INTO _ret FROM u; IF _ret > 0 THEN UPDATE meta_data_model_version SET version=version+1; END IF; RETURN _ret; END $$ LANGUAGE plpgsql;"},
    {"enable": 1, "query": " CREATE OR REPLACE FUNCTION set_datamodel_aggregation( IN _name TEXT, IN _granularity INTERVAL, IN _retention INTERVAL DEFAULT '7 days'::INTERVAL) RETURNS BIGINT AS $$ DECLARE _tablename TEXT; _facttablename TEXT; _aggtablename TEXT; _ret BIGINT; BEGIN _ret = 0; _facttablename='fact_' || _name; _aggtablename='agg_' || _name || '_' || EXTRACT(EPOCH FROM _granularity)::INTEGER::TEXT; IF _granularity <= '0s'::INTERVAL THEN _tablename=_facttablename; ELSE _tablename=_aggtablename; END IF; SELECT COUNT(*) INTO _ret FROM meta_data_model_config WHERE name=_facttablename; IF _ret > 0 THEN WITH i AS ( INSERT INTO meta_data_model_config (name, retention) VALUES (_tablename, EXTRACT(EPOCH FROM _retention)::INTEGER) ON CONFLICT(name) DO UPDATE SET retention=EXTRACT(EPOCH FROM _retention)::INTEGER RETURNING *) SELECT COUNT(*) INTO _ret FROM i; IF _ret > 0 THEN UPDATE meta_data_model_version SET version=version+1; END IF; END IF; RETURN _ret; END $$ LANGUAGE plpgsql;"},
    {"enable": 1, "query": " CREATE OR REPLACE FUNCTION disable_datamodel_aggregation( IN _name TEXT, IN _granularity INTERVAL) RETURNS BIGINT AS $$ DECLARE _tablename TEXT; _ret BIGINT; BEGIN _tablename='agg_' || _name || '_' || EXTRACT(EPOCH FROM _granularity)::INTEGER::TEXT; WITH d AS( DELETE FROM meta_data_model_config WHERE name=_tablename RETURNING *) SELECT COUNT(*) INTO _ret FROM d; RETURN _ret; END $$ LANGUAGE plpgsql;"},
    {"enable": 1, "query": " CREATE OR REPLACE FUNCTION disable_datamodel( IN _name TEXT) RETURNS BIGINT AS $$ DECLARE _ret BIGINT; _facttablename TEXT; _aggtablename TEXT; BEGIN _ret = 0; _facttablename='fact_' || _name; _aggtablename='agg_' || _name || '_[0-9]+'; WITH d AS ( DELETE FROM meta_data_model_config WHERE name=_facttablename OR name SIMILAR TO _aggtablename RETURNING *) SELECT COUNT(*) INTO _ret FROM d; RETURN _ret; END $$ LANGUAGE plpgsql;"},
    {"enable": 1, "query": " CREATE OR REPLACE FUNCTION list_datamodels() RETURNS TABLE ( name TEXT, retention_days TEXT, aggregation TEXT) AS $$ SELECT fact.fact_name AS datamodel, (fact.retention / 86400)::INTEGER::TEXT AS retention_days, string_agg('granularity: ' || agg.agg || ' seconds, retention: ' || (agg.retention / 86400)::INTEGER || ' days', CHR(10)) AS aggregation FROM (SELECT substr(name, 6) AS fact_name, retention FROM meta_data_model_config WHERE name like 'fact_%') fact LEFT JOIN (SELECT substr(array_to_string(((string_to_array(name, '_'))[:array_length(string_to_array(name, '_'), 1)-1]), '_'), 5) AS agg_name, retention, (string_to_array(name, '_'))[array_length(string_to_array(name, '_'), 1)] AS agg FROM meta_data_model_config WHERE name like 'agg_%') agg ON fact.fact_name = agg.agg_name GROUP BY fact.fact_name, fact.retention; $$ LANGUAGE sql;"},
    {"enable": 1, "query": " CREATE OR REPLACE FUNCTION get_datamodel(IN _name TEXT) RETURNS TABLE ( name TEXT, retention_days TEXT, aggregation TEXT) AS $$ SELECT fact.fact_name AS datamodel, (fact.retention / 86400)::INTEGER::TEXT AS retention_days, string_agg('granularity: ' || agg.agg || ' seconds, retention: ' || (agg.retention / 86400)::INTEGER || ' days', CHR(10)) AS aggregation FROM (SELECT substr(name, 6) AS fact_name, retention FROM meta_data_model_config WHERE name = 'fact_' || _name) fact LEFT JOIN (SELECT substr(array_to_string(((string_to_array(name, '_'))[:array_length(string_to_array(name, '_'), 1)-1]), '_'), 5) AS agg_name, retention, (string_to_array(name, '_'))[array_length(string_to_array(name, '_'), 1)] AS agg FROM meta_data_model_config WHERE name SIMILAR TO 'agg_' || _name || '_[0-9]+') agg ON fact.fact_name = agg.agg_name GROUP BY fact.fact_name, fact.retention; $$ LANGUAGE sql;"},
    {"enable": 0, "query": " CREATE OR REPLACE FUNCTION clean_disabled_datamodels() RETURNS BIGINT AS $$ DECLARE _count BIGINT; _tablerecord RECORD; BEGIN _count=0; FOR _tablerecord IN SELECT fact.table_name FROM (SELECT name FROM meta_data_model_config) meta RIGHT JOIN (SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE table_schema='%s' AND table_type='BASE TABLE' AND (table_name like 'fact_%%' OR table_name like 'agg_%%')) fact ON meta.name=fact.table_name WHERE meta.name IS NULL LOOP EXECUTE 'DROP TABLE IF EXISTS ' || _tablerecord.table_name || ' CASCADE'; _count := _count + 1; END LOOP; RETURN _count; END $$ LANGUAGE plpgsql;"},
    {"enable": 1, "query": "CREATE OR REPLACE FUNCTION polar_gawr_collection.get_data_from_proper_table(IN _tbl_type anyelement, IN begin_time INTEGER, IN end_time INTEGER, IN granularity INTEGER) RETURNS SETOF anyelement AS $$ DECLARE _full_table TEXT; _schema_name TEXT; _table_name TEXT; _base_name TEXT; _hour_table_name TEXT; _minute_table_name TEXT; _column TEXT; _column_list TEXT; _first BOOL; _q TEXT; BEGIN _first := true; _full_table := pg_typeof(_tbl_type)::TEXT; _schema_name := TRIM(both '\"' FROM SUBSTRING(_full_table::TEXT, 0, POSITION('.' IN _full_table::TEXT))); _table_name := SUBSTRING(_full_table::TEXT, POSITION('.' IN _full_table::TEXT) + 1); IF SUBSTRING(_table_name, 0, 11) <> 'view_fact_' THEN RAISE EXCEPTION 'view name not start with view_fact_' USING HINT = SUBSTRING(_table_name, 0, 11); END IF; _base_name := SUBSTRING(_table_name, 11); _hour_table_name := 'view_agg_' || _base_name || '_3600'; _minute_table_name := 'view_agg_' || _base_name || '_60'; FOR _column IN SELECT column_name FROM information_schema.columns WHERE table_schema = _schema_name AND table_name = _table_name LOOP IF _first THEN _column_list := _column; _first := false; ELSE _column_list := _column_list || ', ' || _column; END IF; END LOOP; _q := 'SELECT ' || _column_list || ' FROM %s WHERE time >= ' || begin_time || ' AND time <= ' || end_time || '' ; IF granularity % 3600 = 0 THEN IF EXISTS (SELECT * FROM information_schema.tables WHERE table_schema = _schema_name AND table_name = _hour_table_name) THEN RAISE NOTICE 'call %.%', _schema_name, _hour_table_name; RETURN QUERY EXECUTE format(_q, _schema_name || '.' || _hour_table_name); RETURN; END IF; END IF; IF granularity % 60 = 0 THEN IF EXISTS (SELECT * FROM information_schema.tables WHERE table_schema = _schema_name AND table_name = _hour_table_name) THEN RAISE NOTICE 'call %.%' , _schema_name, _minute_table_name; RETURN QUERY EXECUTE format(_q, _schema_name || '.' || _minute_table_name); RETURN; END IF; END IF; RAISE NOTICE 'call %.%', _schema_name, _table_name; RETURN QUERY EXECUTE format(_q, _schema_name || '.' || _table_name); END $$ LANGUAGE plpgsql; "},
    {"enable": 1, "query": "CREATE OR REPLACE FUNCTION polar_gawr_collection.list_logic_ins_name() RETURNS TABLE (logic_ins_name TEXT) AS $$ BEGIN IF EXISTS (SELECT * FROM information_schema.tables WHERE table_schema = 'polar_gawr_collection' AND table_name = 'dim_ins_info') THEN RETURN QUERY SELECT REPLACE(SUBSTRING(n.nspname, 26), '$', '-') AS logic_ins_name FROM pg_catalog.pg_namespace n WHERE  n.nspname LIKE 'polar_gawr_collection_db%' UNION ALL SELECT DISTINCT(logical_ins_name) AS logic_ins_name FROM polar_gawr_collection.dim_ins_info WHERE logical_ins_name != 'others'; ELSE RETURN QUERY SELECT REPLACE(SUBSTRING(n.nspname, 26), '$', '-') AS logic_ins_name FROM pg_catalog.pg_namespace n WHERE  n.nspname LIKE 'polar_gawr_collection_db%'; END IF; END; $$ LANGUAGE plpgsql;"},
    {"enable": 1, "query": "CREATE OR REPLACE FUNCTION polar_gawr_collection.get_logic_ins_schema(IN logic_ins_name TEXT) RETURNS TEXT AS $$ DECLARE logic_ins_schema TEXT; BEGIN IF EXISTS (SELECT * FROM information_schema.tables WHERE table_schema = 'polar_gawr_collection_db_' || REPLACE(logic_ins_name, '-', '$')) THEN SELECT table_schema INTO logic_ins_schema FROM information_schema.tables WHERE table_schema = 'polar_gawr_collection_db_' || REPLACE(logic_ins_name, '-', '$'); RETURN logic_ins_schema; ELSE RETURN 'polar_gawr_collection'; END IF; END; $$ LANGUAGE plpgsql;"},
    {"enable": 1, "query": "GRANT EXECUTE ON FUNCTION polar_gawr_collection.get_data_from_proper_table, polar_gawr_collection.list_logic_ins_name, polar_gawr_collection.get_logic_ins_schema TO PUBLIC;"}
]

}
