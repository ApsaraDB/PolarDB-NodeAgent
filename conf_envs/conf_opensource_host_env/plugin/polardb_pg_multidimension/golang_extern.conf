{
    "schema": "conf/plugin/polardb_pg/schema.json",
    "type": "perf",
    "business": "perf",
    "context": {
        "datatype": "polardb-o",
        "base_path": "/disk1/polardb_ppas/",
        "username": "postgres",
        "password": "",
        "database": "polardb_admin",
        "application_name": "ue_multidimension_collector",
        "cycle": 1,
        "dbtype": "polardb_pg",
        "is_on_ecs": false,
        "environment": "software",
        "enable_pfs": false,
        "local_disk_collect_interval": 15,
        "queries": [
            {
                "name": "aas",
                "datamodel": "polar_aas_history",
                "enable": 0,
                "cycle": 1,
                "query": "SELECT CASE WHEN wait_event IS NULL THEN 'CPU' ELSE wait_event END AS dim_wait_event, CASE WHEN wait_event_type IS NULL THEN 'CPU' ELSE wait_event_type END AS dim_wait_event_type, query AS dim_query, count(*) AS rt_wait_count from pg_stat_activity where state='active' AND backend_type='client backend' AND usename  NOT IN ('aurora') group by dim_wait_event, dim_wait_event_type, dim_query"
            },
            {
                "name": "aas_lite",
                "datamodel": "polar_aas_history",
                "enable": 1,
                "cycle": 1,
                "query": "SELECT CASE WHEN wait_event IS NULL THEN 'CPU' ELSE wait_event END AS dim_wait_event, CASE WHEN wait_event_type IS NULL THEN 'CPU' ELSE wait_event_type END AS dim_wait_event_type, queryid AS dim_queryid, count(*) AS rt_wait_count FROM polar_stat_activity_with_realpid WHERE state='active' AND backend_type='client backend' AND usename NOT IN ('aurora') GROUP BY dim_wait_event, dim_wait_event_type, dim_queryid"
            },
            {
                "name": "process",
                "datamodel": "polar_stat_process",
                "enable": 1,
                "cycle": 10,
                "query": "SELECT backend_type AS dim_backend_type, SUM(cpu_user) AS rate_cpu_user, SUM(cpu_sys) AS rate_cpu_sys, SUM(rss * 4096 / 1024 / 1024) AS rt_rss, SUM(local_read_ps) AS rate_local_read_ps, SUM(local_write_ps) AS rate_local_write_ps, SUM(shared_read_ps) AS rate_shared_read_ps, SUM(shared_write_ps) AS rate_shared_write_ps, SUM(local_read_throughput / 1024 / 1024) AS rate_local_read_throughput, SUM(local_write_throughput / 1024 / 1024) AS rate_local_write_throughput, SUM(shared_read_throughput / 1024 / 1024) AS rate_shared_read_throughput, SUM(shared_write_throughput / 1024 / 1024) AS rate_shared_write_throughput, COUNT(*) AS rt_backend_num FROM polar_stat_activity_with_realpid GROUP BY backend_type"
            },
            {
                "name": "io_info",
                "datamodel": "polar_stat_io_info",
                "enable": 1,
                "cycle": 10,
                "query": "SELECT filetype AS dim_filetype, fileloc AS dim_fileloc, open_count AS rate_open_count, open_latency_us::BIGINT AS rate_open_latency_us, close_count AS rate_close_count, read_count AS rate_read_count, write_count AS rate_write_count, read_throughput / 1024 / 1024 AS rate_read_throughput, write_throughput  / 1024 / 1024 AS rate_write_throughput, read_latency_us::BIGINT AS rate_read_latency_us, write_latency_us::BIGINT AS rate_write_latency_us, seek_count AS rate_seek_count, seek_latency_us::BIGINT AS rate_seek_latency_us, creat_count AS rate_creat_count, creat_latency_us::BIGINT AS rate_creat_latency_us, fsync_count::BIGINT AS rate_fsync_count, fsync_latency_us::BIGINT AS rate_fsync_latency_us, falloc_count::BIGINT AS rate_falloc_count, falloc_latency_us::BIGINT AS rate_falloc_latency_us FROM polar_stat_io_info"
            },
            {
                "name": "io_latency",
                "datamodel": "polar_stat_io_latency",
                "enable": 1,
                "cycle": 10,
                "query": "SELECT iokind AS dim_iotype, SUM(num_lessthan200us) AS rate_num_lessthan200us, SUM(num_lessthan400us) AS rate_num_lessthan400us, SUM(num_lessthan600us+num_lessthan800us+num_lessthan1ms) AS rate_num_lessthan1ms, SUM(num_lessthan10ms) AS rate_num_lessthan10ms, SUM(num_lessthan100ms) AS rate_num_lessthan100ms, SUM(num_morethan100ms) AS rate_num_morethan100ms FROM polar_stat_io_latency GROUP BY dim_iotype"
            },
            {
                "name": "network",
                "datamodel": "polar_stat_network",
                "enable": 0,
                "cycle": 10,
                "query": "SELECT backend_type AS dim_backend_type, client_addr AS dim_client, COUNT(*) AS rt_client_count, SUM(send_bytes) / 1024 / 1024 AS rate_send_mb, SUM(recv_bytes) / 1024 / 1024 AS rate_recv_mb, SUM(retrans) AS rate_retrans, MAX(sendq) AS rt_max_sendq, MAX(recvq) AS rt_max_recvq, MAX(cwnd) AS rt_max_cwnd, MAX(rtt) AS rt_max_rtt FROM polar_proc_stat_network() n, pg_stat_get_activity(-2) a WHERE a.pid=n.pid AND client_addr IS NOT NULL GROUP BY backend_type, client_addr"
            },
            {
                "name": "memorycontext",
                "datamodel": "polar_stat_mcxt",
                "enable": 0,
                "cycle": 10,
                "query": "select name AS dim_context_name, sum(totalspace) AS rt_totalspace from polar_backends_mcxt group by dim_context_name order by rt_totalspace desc limit 5"
            },
            {
                "name": "lwlock_stat",
                "datamodel": "polar_stat_lwlock",
                "enable": 0,
                "cycle": 60,
                "query": "SELECT tranche::TEXT AS dim_tranche, name AS dim_name, lock_nums::TEXT AS dim_lock_num, sh_acquire_count AS rate_sh_acquire_count, ex_acquire_count AS rate_ex_acquire_count, block_count AS rate_block_count, wait_time AS rate_wait_time, max_lock_waiters AS rt_max_lock_waiters FROM polar_stat_lwlock"
            },
            {
                "name": "lock_contention",
                "datamodel": "polar_lock_contention_history",
                "enable": 1,
                "cycle": 60,
                "query": "WITH t_locks AS ( SELECT l.*,CASE mode when 'INVALID' then -1 when 'SIReadLock' then 0 when 'AccessShareLock' then 1   when 'RowShareLock' then 2   when 'RowExclusiveLock' then 3   when 'ShareUpdateExclusiveLock' then 4   when 'ShareLock' then 5   when 'ShareRowExclusiveLock' then 6   when 'ExclusiveLock' then 7   when 'AccessExclusiveLock' then 8   else -1 END AS modeseq, p.datname,p.query AS query FROM pg_locks l, pg_stat_activity_with_realpid p WHERE l.pid=p.pid), t_blocked AS ( SELECT * FROM t_locks WHERE NOT granted), t_locking AS ( SELECT * FROM t_locks WHERE granted), t_blocker AS ( SELECT distinct r.* from t_blocked w join t_locking r on   (   r.locktype is not distinct from w.locktype and   r.database is not distinct from w.database and   r.relation is not distinct from w.relation and   r.page is not distinct from w.page and   r.tuple is not distinct from w.tuple and   r.virtualxid is not distinct from w.virtualxid and   r.transactionid is not distinct from w.transactionid and   r.classid is not distinct from w.classid and   r.objid is not distinct from w.objid and   r.objsubid is not distinct from w.objsubid and   r.pid <> w.pid   )), t_unionall AS ( SELECT * FROM t_blocker UNION ALL SELECT * FROM t_blocked), t_real_blocker_query AS ( SELECT locktype,datname,relation,classid,mode,query,row_number() over w AS rn, COUNT(*) over w AS total_num FROM t_unionall WINDOW w AS (PARTITION BY locktype,datname,relation,page,tuple,virtualxid,transactionid::TEXT,classid,objid,objsubid ORDER BY modeseq DESC)) SELECT locktype AS dim_locktype,mode AS dim_mode,datname AS dim_datname,CASE WHEN relation IS NOT NULL THEN relation::regclass::text WHEN classid IS NOT NULL THEN classid::regclass::text ELSE '' END AS dim_relation, query AS dim_query,SUM(total_num) AS rt_total_num FROM t_real_blocker_query WHERE rn=1 GROUP BY locktype,mode,datname,dim_relation,query"
            },
            {
                "name": "slru_stat",
                "datamodel": "polar_stat_slru",
                "enable": 0,
                "cycle": 60,
                "query": "SELECT slru_type AS dim_slru_type, slots_number::TEXT AS dim_slots_number, valid_pages AS rt_valid_pages, empty_pages AS rt_empty_pages, writing_pages AS rt_writing_pages, reading_pages AS rt_reading_pages, wait_readings AS rt_wait_readings, wait_writings AS rt_wait_writings, read_count AS rate_read_count, write_count AS rate_write_count, read_upgrade_count AS rate_read_upgrade_count, victim_write_count AS rate_victim_write_count, zero_count AS rate_zero_count, flush_count AS rate_flush_count, truncate_count AS rate_truncate_count, storage_read_count AS rate_storage_read_count, storage_write_count AS rate_storage_write_count FROM polar_stat_slru()"
            },
            {
                "name": "topsql_without_polar_stat_sql",
                "datamodel": "polar_stat_top_sql",
                "enable": 1,
                "cycle": 600,
                "query": "SELECT pg.queryid AS dim_queryid_reserve, pg.query AS dim_query_reserve, SUM(shared_blks_hit+local_blks_hit) AS delta_blks_hit_reserve, SUM(shared_blks_read+local_blks_read+temp_blks_read) AS delta_blks_read_reserve, SUM(shared_blks_hit+shared_blks_read+local_blks_hit+local_blks_read+temp_blks_read) AS delta_logical_read_top30, SUM(shared_blks_dirtied+local_blks_dirtied) AS delta_blks_dirtied_reserve, SUM(shared_blks_written+local_blks_written+temp_blks_written) AS delta_blks_written_reserve, SUM(shared_blks_dirtied+shared_blks_written+local_blks_dirtied+local_blks_written+temp_blks_written) AS delta_logical_write_top30, SUM(blk_read_time) AS delta_blk_read_time_reserve, SUM(blk_write_time) AS delta_blk_write_time_reserve, SUM(blk_read_time+blk_write_time) AS delta_blk_iotime_top30, SUM(calls) AS delta_calls_top30, SUM(total_time) AS delta_total_time_top30, CAST(SUM(rows) AS BIGINT) AS delta_rows_reserve FROM (SELECT statements.* FROM pg_stat_statements statements, pg_user u, pg_database db WHERE statements.userid=u.usesysid AND statements.dbid=db.oid AND db.datname NOT IN ('polardb_admin') AND u.usename NOT IN ('aurora', 'postgres')) pg GROUP BY pg.queryid, pg.query ORDER BY SUM(total_time) DESC LIMIT 100"
            },
            {
                "name": "max_memory_sql",
                "datamodel": "polar_stat_max_memory_sql",
                "enable": 1,
                "cycle": 10,
                "query": "SELECT pid::TEXT AS dim_pid, datname AS dim_dbname, usename AS dim_username, query AS dim_query, rss * 4096 / 1024 / 1024 AS rt_rss_mb FROM polar_stat_activity_with_realpid WHERE state='active' AND backend_type='client backend' AND rss * 4096 / 1024 / 1024 > 256 ORDER BY rss DESC LIMIT 1"
            },
            {
                "name": "polar_max_memory_backend_memory_context",
                "datamodel": "polar_max_memory_backend_memory_context",
                "enable": 0,
                "cycle": 10,
                "query": "SELECT pid::TEXT AS dim_pid, name AS dim_name, level::TEXT AS dim_level, nblocks AS rt_nblocks, freechunks AS  rt_freechunks, totalspace AS rt_totalspace, freespace AS rt_freespace FROM polar_get_mcxt((SELECT pid FROM polar_stat_activity_with_realpid WHERE backend_type='client backend' AND state='active' AND rss * 4096 / 1024 / 1024 > 256 ORDER BY rss DESC LIMIT 1)) ORDER BY totalspace DESC LIMIT 10"
            },
            {
                "name": "slow_query",
                "datamodel": "polar_stat_slow_query",
                "enable": 1,
                "cycle": 10,
                "query": "SELECT pid::TEXT AS dim_pid, datname AS dim_dbname, usename AS dim_username, wait_event AS dim_wait_event, wait_event_type AS dim_wait_event_type, query AS dim_query, EXTRACT(EPOCH FROM NOW() - query_start)::BIGINT AS rt_executing_time FROM polar_stat_activity_with_realpid WHERE state='active' AND backend_type='client backend' AND EXTRACT(EPOCH FROM NOW() - query_start)::BIGINT > 5"
            },
            {
                "name": "top_table",
                "datamodel": "polar_stat_user_tables",
                "enable": 1,
                "role": 5,
                "cycle": 3600,
                "queryalldb": true,
                "query": "SELECT current_database() AS dim_dbname_reserve, schemaname AS dim_schemaname_reserve, relname AS dim_relname_reserve, seq_scan AS delta_seq_scan_reserve, seq_tup_read AS delta_seq_tup_read_top20, idx_scan AS delta_idx_scan_reserve, idx_tup_fetch AS delta_idx_tup_fetch_top20, n_tup_ins AS delta_n_tup_ins_reserve, n_tup_upd AS delta_n_tup_upd_reserve, n_tup_del AS delta_n_tup_del_reserve, n_tup_hot_upd AS delta_n_tup_hot_upd_reserve, (n_tup_ins+n_tup_upd+n_tup_del+n_tup_hot_upd) AS delta_n_tup_modified_top20, n_mod_since_analyze AS rt_n_mod_since_analyze_top20, n_live_tup AS rt_n_live_tup_reserve, n_dead_tup AS rt_n_dead_tup_reserve, CASE WHEN n_dead_tup+n_live_tup=0 THEN 0 ELSE ROUND(n_dead_tup::NUMERIC /(n_dead_tup+n_live_tup) * 100, 2) END AS rt_dead_tup_ratio_top20, EXTRACT(epoch FROM  last_vacuum)::BIGINT AS rt_last_vacuum_reserve, EXTRACT(epoch FROM last_autovacuum)::BIGINT AS rt_last_autovacuum_reserve, EXTRACT(epoch FROM last_analyze)::BIGINT AS rt_last_analyze_reserve, EXTRACT(epoch FROM last_autoanalyze)::BIGINT AS rt_last_autoanalyze_reserve FROM pg_stat_user_tables WHERE current_database() NOT IN ('polardb_admin') AND schemaname NOT LIKE 'polar_gawr%' ORDER BY (seq_tup_read+idx_tup_fetch) DESC LIMIT 100"
            },
            {
                "name": "top_table_io",
                "datamodel": "polar_statio_user_tables",
                "enable": 1,
                "role": 5,
                "cycle": 3600,
                "queryalldb": true,
                "query": "SELECT current_database() AS dim_dbname_reserve, schemaname AS dim_schemaname_reserve, relname AS dim_relname_reserve, heap_blks_read AS delta_heap_blks_read_reserve, heap_blks_hit AS delta_heap_blks_hit_reserve, (heap_blks_read+heap_blks_hit) AS delta_heap_logical_read_top20, idx_blks_read AS delta_idx_blks_read_reserve, idx_blks_hit AS delta_idx_blks_hit_reserve, (idx_blks_read+idx_blks_hit) AS delta_idx_logical_read_top20 FROM pg_statio_user_tables WHERE current_database() NOT IN ('polardb_admin') AND schemaname NOT LIKE 'polar_gawr%' ORDER BY (heap_blks_read+heap_blks_hit) DESC LIMIT 100"
            },
            {
                "name": "top_index",
                "datamodel": "polar_stat_user_indexes",
                "enable": 1,
                "role": 5,
                "cycle": 3600,
                "queryalldb": true,
                "query": "SELECT current_database() AS dim_dbname_reserve, schemaname AS dim_schemaname_reserve, relname AS dim_relname_reserve, indexrelname AS dim_indexrelname_reserve, idx_scan AS delta_idx_scan_reserve, idx_tup_read AS delta_idx_tup_read_top20, idx_tup_fetch AS delta_idx_tup_fetch_reserve FROM pg_stat_user_indexes WHERE current_database() NOT IN ('polardb_admin') AND schemaname NOT LIKE 'polar_gawr%' ORDER BY (idx_tup_read) DESC LIMIT 100"
            },
            {
                "name": "top_index_io",
                "datamodel": "polar_statio_user_indexes",
                "enable": 1,
                "role": 5,
                "cycle": 3600,
                "queryalldb": true,
                "query": "SELECT current_database() AS dim_dbname_reserve, schemaname AS dim_schemaname_reserve, relname AS dim_relname_reserve, indexrelname AS dim_indexrelname_reserve, idx_blks_read AS delta_idx_blks_read_reserve, idx_blks_hit AS delta_idx_blks_hit_reserve, (idx_blks_read+idx_blks_hit) AS delta_idx_logical_read_top20 FROM pg_statio_user_indexes WHERE current_database() NOT IN ('polardb_admin') AND schemaname NOT LIKE 'polar_gawr%' ORDER BY (idx_blks_read+idx_blks_hit) DESC LIMIT 100"
            },
            {
                "name": "top_sequence_io",
                "datamodel": "polar_statio_user_sequences",
                "enable": 1,
                "role": 5,
                "cycle": 3600,
                "queryalldb": true,
                "query": "SELECT current_database() AS dim_dbname_reserve, schemaname AS dim_schemaname_reserve, relname AS dim_relname_reserve, blks_read AS delta_blks_read_reserve, blks_hit AS delta_blks_hit_reserve, (blks_read+blks_hit) AS delta_logical_read_top20 FROM pg_statio_user_sequences WHERE current_database() NOT IN ('polardb_admin') AND schemaname NOT LIKE 'polar_gawr%' ORDER BY (blks_read+blks_hit) DESC LIMIT 100"
            },
            {
                "name": "top_function",
                "datamodel": "polar_stat_user_functions",
                "enable": 1,
                "role": 5,
                "cycle": 3600,
                "queryalldb": true,
                "query": "SELECT current_database() AS dim_dbname_reserve, schemaname AS dim_schemaname_reserve, funcname AS dim_funcname_reserve, calls AS delta_calls_reserve, total_time AS delta_total_time_top20, self_time AS delta_self_time_reserve FROM pg_stat_user_functions WHERE current_database() NOT IN ('polardb_admin') AND schemaname NOT LIKE 'polar_gawr%' ORDER BY calls DESC LIMIT 100"
            },
            {
                "name": "top_relation_size",
                "datamodel": "polar_stat_relation_size",
                "enable": 1,
                "role": 5,
                "cycle": 3600,
                "queryalldb": true,
                "query": "SELECT dim_dbname_reserve, ns.nspname AS dim_schemaname_reserve, dim_relname_reserve, dim_relkind_reserve, relsize_total AS rt_relsize_total_top20, relsize_total AS delta_relsize_incremental_top20 FROM (SELECT current_database() AS dim_dbname_reserve, relnamespace, relname AS dim_relname_reserve, relpages * current_setting('block_size')::BIGINT / 1024 / 1024 AS relsize_total, relkind AS dim_relkind_reserve FROM pg_class ORDER BY relpages DESC LIMIT 100) c JOIN (SELECT oid, nspname FROM pg_namespace) ns ON c.relnamespace=ns.oid"
            },
            {
                "name": "top_table_age",
                "datamodel": "polar_stat_table_age",
                "enable": 1,
                "role": 5,
                "cycle": 3600,
                "queryalldb": true,
                "query": "SELECT dim_dbname, ns.nspname AS dim_schemaname, dim_relname, dim_relkind, rt_table_age FROM (SELECT current_database() AS dim_dbname, relnamespace, relname AS dim_relname, relkind AS dim_relkind, AGE(relfrozenxid) AS rt_table_age FROM pg_class WHERE AGE(relfrozenxid) != 2147483647 ORDER BY rt_table_age DESC LIMIT 10) c JOIN (SELECT oid, nspname FROM pg_namespace) ns ON c.relnamespace=ns.oid"
            },
            {
                "name": "pg_stat_replication",
                "datamodel": "pg_stat_replication",
                "enable": 1,
                "cycle": 10,
                "role": 1,
                "query": "SELECT usename AS dim_username, application_name AS dim_application_name, client_addr AS dim_client_addr, backend_start::TEXT AS dim_backend_start, state AS dim_state, sync_state AS dim_sync_state, pg_wal_lsn_diff(pg_current_wal_lsn(), sent_lsn)::BIGINT AS rt_sent_latency_in_bytes, pg_wal_lsn_diff(pg_current_wal_lsn(), write_lsn)::BIGINT AS rt_write_latency_in_bytes, pg_wal_lsn_diff(pg_current_wal_lsn(), flush_lsn)::BIGINT AS rt_flush_latency_in_bytes, pg_wal_lsn_diff(pg_current_wal_lsn(), replay_lsn)::BIGINT AS rt_replay_latency_in_bytes, EXTRACT(MILLISECONDS FROM write_lag)::BIGINT AS rt_write_lag_in_ms, EXTRACT(MILLISECONDS FROM flush_lag)::BIGINT AS rt_flush_lag_in_ms, EXTRACT(MILLISECONDS FROM replay_lag)::BIGINT AS rt_replay_lag_in_ms FROM pg_stat_replication"
            },
            {
                "name": "pg_replication_slots",
                "datamodel": "pg_replication_slots",
                "enable": 1,
                "cycle": 10,
                "role": 1,
                "query": "SELECT slot_name AS dim_slot_name, plugin AS dim_plugin, slot_type AS dim_slot_type, database AS dim_dbname, temporary::TEXT AS dim_temporary, active::TEXT AS dim_active, AGE(xmin) AS rt_xmin_age, AGE(catalog_xmin) AS rt_catalog_xmin_age, pg_wal_lsn_diff(pg_current_wal_lsn(), restart_lsn)::BIGINT AS rt_restart_latency_in_bytes, pg_wal_lsn_diff(pg_current_wal_lsn(), confirmed_flush_lsn)::BIGINT AS rt_confirmed_flush_latency_in_bytes FROM pg_replication_slots"
            },
            {
                "name": "walreceiver",
                "datamodel": "pg_stat_walreceiver",
                "enable": 0,
                "cycle": 600,
                "query": "SELECT 1"
            },
            {
                "name": "pg_stat_database",
                "datamodel": "pg_stat_database",
                "enable": 1,
                "cycle": 60,
                "query": "SELECT datname AS dim_dbname, numbackends AS rt_numbackends, xact_commit AS rate_xact_commit, xact_rollback AS rate_xact_rollback, blks_read AS rate_blks_read, blks_hit AS rate_blks_hit, tup_returned AS rate_tup_returned, tup_fetched AS rate_tup_fetched, tup_inserted AS rate_tup_inserted, tup_updated AS rate_tup_updated, tup_deleted AS rate_tup_deleted, conflicts AS delta_conflicts, temp_files AS delta_temp_files, temp_bytes AS delta_temp_bytes, deadlocks AS delta_deadlocks  FROM pg_stat_database WHERE datname NOT LIKE 'template%' AND datname NOT IN ('polardb_admin')"
            },
            {
                "name": "vacuum_progress",
                "datamodel": "pg_stat_progress_vacuum",
                "enable": 1,
                "cycle": 60,
                "query": "SELECT datname AS dim_dbname, relid::TEXT AS dim_relid, phase AS dim_phase, heap_blks_total AS rt_heap_blks_total, heap_blks_scanned AS rt_heap_blks_scanned, heap_blks_vacuumed AS rt_heap_blks_vacuumed, index_vacuum_count AS rt_index_vacuum_count, max_dead_tuples AS rt_max_dead_tuples, num_dead_tuples AS rt_num_dead_tuples FROM pg_stat_progress_vacuum"
            },
            {
                "name": "settings",
                "datamodel": "polar_settings",
                "enable": 1,
                "cycle": 3600,
                "query": "SELECT name AS dim_name, source AS dim_source, setting AS dim_setting FROM pg_settings"
            }
        ],
        "collect_db_init_sqls": [
            {
                "enable": 1,
                "query": "CREATE OR REPLACE VIEW polar_stat_activity_with_realpid AS SELECT b.*, D.datname AS datname, U.rolname AS usename, a.queryid, (CASE WHEN a.wait_object IS NULL and a.wait_time IS NOT NULL THEN CAST(pg_blocking_pids(b.pid) as text) ELSE CAST(a.wait_object as text) END)::text AS wait_object, wait_type,wait_time as wait_time_ms, cpu_user, cpu_sys, rss, shared_read_ps, shared_write_ps, shared_read_throughput, shared_write_throughput, shared_read_latency_ms, shared_write_latency_ms, local_read_ps, local_write_ps, local_read_throughput, local_write_throughput, local_read_latency_ms, local_write_latency_ms FROM pg_stat_get_activity(-2) AS b LEFT JOIN polar_stat_process() AS a ON b.pid=a.pid LEFT JOIN pg_database AS D ON (b.datid = D.oid) LEFT JOIN pg_authid AS U ON (b.usesysid = U.oid);"
            },
            {
                "enable": 1,
                "query": "CREATE OR REPLACE VIEW pg_stat_activity_with_realpid AS SELECT b.*, D.datname AS datname, U.rolname AS usename FROM pg_stat_get_activity(-2) AS b LEFT JOIN pg_database AS D ON (b.datid = D.oid) LEFT JOIN pg_authid AS U ON (b.usesysid = U.oid);"
            }
        ],
        "configmap": {
            "enable_db_multidimension_collect": "1",
            "enable_ro_multidimension_collect": "1",
            "enable_write_localdb_backend": "1",
            "enable_ro_write_localdb_backend": "1",
            "enable_write_remotedb_backend": "1",
            "enable_write_sqlite_backend": "0"
        },
        "enable_dbconfig": true,
        "dbconfig_schema": "polar_gawr_collection",
        "enable_outdict_log": false,
        "commands": [
            {
                "command": "uname -sr",
                "name": "osinfo",
                "type": "os"
            },
            {
                "command": "lscpu | grep -i architecture | awk '{print $NF}'",
                "name": "cpu_architecture",
                "type": "cpu"
            },
            {
                "command": "dmidecode -s processor-version | head -1",
                "name": "cpu_model_name",
                "type": "cpu"
            },
            {
                "command": "cat /proc/cpuinfo | grep -i 'model name' | awk -F ': ' '{print $2}' | head -1",
                "name": "cpu_model_name",
                "type": "cpu"
            },
            {
                "command": "lscpu | grep Socket |awk '{print $NF}'",
                "name": "cpu_sockets",
                "type": "cpu"
            },
            {
                "command": "lscpu | grep '^CPU(s):' | awk '{print $NF}'",
                "name": "cpu_cores",
                "type": "cpu"
            },
            {
                "command": "lscpu | grep Thread |awk '{print $NF}'",
                "name": "cpu_thread_per_cores",
                "type": "cpu"
            },
            {
                "command": "lscpu | grep Core |awk '{print $NF}'",
                "name": "cpu_core_per_sockets",
                "type": "cpu"
            },
            {
                "command": "lscpu | grep -i 'numa node(s):' |awk '{print $NF}'",
                "name": "numa_nodes",
                "type": "cpu"
            },
            {
                "command": "lscpu | grep 'L1d cache:' |awk '{print $NF}'",
                "name": "l1d_cache",
                "type": "cpu"
            },
            {
                "command": "lscpu | grep 'L1i cache:' |awk '{print $NF}'",
                "name": "l1i_cache",
                "type": "cpu"
            },
            {
                "command": "lscpu | grep 'L2 cache:' |awk '{print $NF}'",
                "name": "l2_cache",
                "type": "cpu"
            },
            {
                "command": "lscpu | grep 'L3 cache:' |awk '{print $NF}'",
                "name": "l3_cache",
                "type": "cpu"
            },
            {
                "command": "cat /proc/meminfo | grep MemTotal | awk '{print int($2 / 1024 / 1024)}'",
                "name": "memtotal",
                "type": "memory"
            },
            {
                "command": "expr $(cat /proc/meminfo  | grep Hugepagesize | awk '{print $2}') / 1024",
                "name": "hugepage_size",
                "type": "memory"
            },
            {
                "command": "expr $(cat /proc/meminfo | grep Hugepagesize | awk '{print $2}') \\* $(cat /proc/meminfo | grep HugePages_Total | awk '{print $NF}') / 1024 / 1024",
                "name": "hugepage_total",
                "type": "memory"
            },
            {
                "command": "cat /proc/sys/vm/swappiness",
                "type": "os_params"
            },
            {
                "command": "cat /proc/sys/vm/vfs_cache_pressure",
                "type": "os_params"
            },
            {
                "command": "cat /proc/sys/vm/min_free_kbytes",
                "type": "os_params"
            }
        ],
        "extensions": [
            "polar_monitor",
            "pg_stat_statements"
        ]
    }
}
